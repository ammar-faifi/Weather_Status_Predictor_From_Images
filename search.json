[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "site",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "code/Binary_Classification.html",
    "href": "code/Binary_Classification.html",
    "title": "Binary Clssification with ML",
    "section": "",
    "text": "Code\nimport pickle\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\nfrom scipy.stats import uniform, randint\nfrom matplotlib.ticker import MultipleLocator, AutoMinorLocator\n\nimport xgboost as xgb\nfrom sklearn.model_selection import (\n    KFold,\n    GridSearchCV,\n    RepeatedKFold,\n    cross_val_score,\n    train_test_split,\n    RandomizedSearchCV\n)\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.metrics import accuracy_score, RocCurveDisplay\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.pipeline import make_pipeline\n\nfrom utils import load_all_images, predict_image\n\n# the number of height & width pixels to resize images to\nPIXELS = 50"
  },
  {
    "objectID": "code/Binary_Classification.html#logisticregression",
    "href": "code/Binary_Classification.html#logisticregression",
    "title": "Binary Clssification with ML",
    "section": "LogisticRegression",
    "text": "LogisticRegression\n\nBasic\n\nCode\n# create Logisitc Model\nlog_model = LogisticRegression(\n    max_iter=3000,\n    verbose=True,\n)\n\nresult = log_model.fit(X_train, y_train)\n\n\n\nModel accuracy: 0.633\nModel accuracy: 0.787\n\n\n\n\n\n\n\nTuning\n\nCode\n# create Logisitc Model\nlog_cv = LogisticRegressionCV(\n    cv=5,\n    solver=\"saga\",\n    scoring=\"accuracy\",\n    n_jobs=-1,\n    verbose=True,\n    max_iter=2000,\n)\n\n# train\nresults = log_cv.fit(X_train, y_train)\n\n\n\nModel accuracy: 0.678"
  },
  {
    "objectID": "code/Binary_Classification.html#knn",
    "href": "code/Binary_Classification.html#knn",
    "title": "Binary Clssification with ML",
    "section": "KNN",
    "text": "KNN\n\nBasic\n\nCode\n# create KNN model\nknn = KNeighborsClassifier()\n\nknn_result = knn.fit(X_train, y_train)\n\n\n\nTuning\n\nCode\n# create repeated 10-Fold\nkfold = RepeatedKFold(n_splits=5, n_repeats=10)\n\nparam_grid = {\"n_neighbors\": range(1, 50, 4)}\n\nknn_search = GridSearchCV(\n    knn, param_grid, cv=kfold, scoring=\"roc_auc\", n_jobs=-1\n)\nresult = knn_search.fit(X_train, y_train)\n\n\n\nModel accuracy: 0.633\nModel accuracy: 0.787"
  },
  {
    "objectID": "code/Binary_Classification.html#decision-trees",
    "href": "code/Binary_Classification.html#decision-trees",
    "title": "Binary Clssification with ML",
    "section": "Decision Trees",
    "text": "Decision Trees\n\nStudy Effect of CCP\n\nCode\nclf = DecisionTreeClassifier(random_state=0)\npath = clf.cost_complexity_pruning_path(X_train, y_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities\n\n\nCode\nclfs = []\nfor ccp_alpha in ccp_alphas:\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    clf.fit(X_train, y_train)\n    clfs.append(clf)\n\n\n\nCode\ntrain_scores = [clf.score(X_train, y_train) for clf in clfs]\ntest_scores = [clf.score(X_test, y_test) for clf in clfs]\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(ccp_alphas[:-1], train_scores[:-1], marker=\"o\", label=\"train\", drawstyle=\"steps-post\")\nax.plot(ccp_alphas[:-1], test_scores[:-1], marker=\"o\", label=\"test\", drawstyle=\"steps-post\")\nax.legend()\n# plt.grid(True, which='minor')\n# plt.gca().xaxis.set_minor_locator(AutoMinorLocator())\nplt.show()\n\n\n\n\n\n\n\nCode\nclfs = clfs[:-1]\nccp_alphas = ccp_alphas[:-1]\n\nnode_counts = [clf.tree_.node_count for clf in clfs]\ndepth = [clf.tree_.max_depth for clf in clfs]\nfig, ax = plt.subplots(2, 1)\nax[0].plot(ccp_alphas, node_counts, marker=\"o\", drawstyle=\"steps-post\")\nax[0].set_xlabel(\"alpha\")\nax[0].set_ylabel(\"number of nodes\")\nax[0].set_title(\"Number of nodes vs alpha\")\nax[1].plot(ccp_alphas, depth, marker=\"o\", drawstyle=\"steps-post\")\nax[1].set_xlabel(\"alpha\")\nax[1].set_ylabel(\"depth of tree\")\nax[1].set_title(\"Depth vs alpha\")\nfig.tight_layout()\n\n\n\n\n\n\n\nBasic Tuning\n\nCode\n# create DecisionTree model\ndt_model = DecisionTreeClassifier()\n\n# create 5-Fold CV\nkfold = KFold(5, shuffle=True)\n\n\n# GridSearch\ndt_search = GridSearchCV(\n    dt_model,\n    param_grid={\n        \"max_depth\": range(10, 26, 2),\n        \"min_samples_split\": range(2, 11, 2),\n        \"ccp_alpha\": [0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015, 0.00175],\n    },\n    cv=kfold,\n    n_jobs=-1,\n    verbose=3,\n    scoring=\"accuracy\",\n)\n\ndt_result = dt_search.fit(X_train, y_train)\n\n\n\nCode\ndt_result.best_score_, dt_result.best_params_\n\n\n(0.6835829743077494,\n {'ccp_alpha': 0.001, 'max_depth': 18, 'min_samples_split': 2})\n\n\nWe saw from the above figure the best ccp_alpha value is in the interval [0.000, 0.002]\n\n\nModel accuracy: 0.679\n\n\n\n\n\n\n\nCode\n# Best model\ndt_model = DecisionTreeClassifier(ccp_alpha=0.00075)\ndt_model.fit(X_train, y_train)\n\ndt_model.score(X_test, y_test)\n\n\n0.6907269458001541\n\n\n\n\nWith Bagging\n\nCode\ndt_bagging = BaggingClassifier(\n    DecisionTreeClassifier(),\n    n_estimators=10,\n)\n\ndt_bagging_scores = cross_val_score(\n    dt_bagging,\n    X_train,\n    y_train,\n    cv=10,\n    scoring=\"accuracy\",\n    n_jobs=-1,\n    verbose=3,\n)\n\n\n\nCode\nprint(f\"{dt_bagging_scores.mean():0.2f} accuracy with a standard deviation of {dt_bagging_scores.std():0.2f}\")\n\n\n0.71 accuracy with a standard deviation of 0.01\n\n\n\n\nTuning with RandomizedSearchCV\n\nCode\ndt_bagging = BaggingClassifier(\n    DecisionTreeClassifier(),\n)\n\nparam_distributions = {\n    'base_estimator__ccp_alpha': uniform(0.0, 0.001),\n    'base_estimator__min_samples_split': range(2, 20, 2),\n    'base_estimator__max_depth': range(10, 35),\n    'n_estimators': range(5, 30),\n}\n\nrandom_search = RandomizedSearchCV(\n    dt_bagging,\n    param_distributions,\n    cv=10,\n    n_iter=20,\n    n_jobs=-1,\n    verbose=3,\n    scoring='accuracy',\n)\n\nrandom_search_results = random_search.fit(X_train, y_train)\n\n\n\nCode\nprint(f\"Best Score: {random_search_results.best_score_:0.2f}\")\nrandom_search_results.best_estimator_\n\n\nBest Score: 0.73\n\n\nBaggingClassifier(base_estimator=DecisionTreeClassifier(ccp_alpha=0.0008401410500706274,\n                                                        max_depth=27,\n                                                        min_samples_split=6),\n                  n_estimators=26)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.BaggingClassifierBaggingClassifier(base_estimator=DecisionTreeClassifier(ccp_alpha=0.0008401410500706274,\n                                                        max_depth=27,\n                                                        min_samples_split=6),\n                  n_estimators=26)base_estimator: DecisionTreeClassifierDecisionTreeClassifier(ccp_alpha=0.0008401410500706274, max_depth=27,\n                       min_samples_split=6)DecisionTreeClassifierDecisionTreeClassifier(ccp_alpha=0.0008401410500706274, max_depth=27,\n                       min_samples_split=6)"
  },
  {
    "objectID": "code/Binary_Classification.html#random-forests",
    "href": "code/Binary_Classification.html#random-forests",
    "title": "Binary Clssification with ML",
    "section": "Random Forests",
    "text": "Random Forests\n\nBasic\n\nCode\nrf_model = RandomForestClassifier()\n\nrf_scores = cross_val_score(\n    rf_model,\n    X_train,\n    y_train,\n    cv=10,\n    scoring=\"accuracy\",\n    n_jobs=-1,\n    verbose=3,\n)\n\n\n\nCode\nprint(f\"{rf_scores.mean():0.2f} accuracy with a standard deviation of {rf_scores.std():0.2f}\")\n\n\n0.74 accuracy with a standard deviation of 0.01\n\n\n\n\nTuning with RandomizedSearchCV\n\nCode\nrf_model = RandomForestClassifier()\n\nparam_distributions = {\n    \"max_features\": uniform(0.05, 0.35),\n    \"min_samples_leaf\": randint(1, 9),\n    \"max_samples\": uniform(0.5, 0.3),\n}\n\nrf_random_search = RandomizedSearchCV(\n    rf_model,\n    param_distributions,\n    cv=10,\n    n_iter=20,\n    n_jobs=-1,\n    verbose=3,\n    scoring=\"accuracy\",\n)\n\nrf_random_result = rf_random_search.fit(X_train, y_train)\n\n\n\nCode\nprint(f\"Best Score: {random_search_results.best_score_:0.2f}\")\nrf_random_result.best_estimator_\n\n\nBest Score: 0.73\n\n\nRandomForestClassifier(max_features=0.23303817510595698,\n                       max_samples=0.7427985486669761, min_samples_leaf=8)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(max_features=0.23303817510595698,\n                       max_samples=0.7427985486669761, min_samples_leaf=8)"
  },
  {
    "objectID": "code/Binary_Classification.html#gradient-boosting",
    "href": "code/Binary_Classification.html#gradient-boosting",
    "title": "Binary Clssification with ML",
    "section": "Gradient Boosting",
    "text": "Gradient Boosting\n\nCode\n# create Gradient Boosting model\nxgb_model = xgb.XGBClassifier()\n\nxgb_scores = cross_val_score(\n    xgb_model,\n    X_train,\n    y_train,\n    cv=10,\n    n_jobs=-1,\n    verbose=3,\n    scoring='accuracy',\n)\n\n\n\nCode\nprint(f\"{xgb_scores.mean():0.2f} accuracy with a standard deviation of {xgb_scores.std():0.2f}\")\n\n\n0.74 accuracy with a standard deviation of 0.02\n\n\n\nTuning\n\nCode\nparam_distributions = {\n    'max_depth': randint(3, 10),\n    'min_child_weight': randint(1, 15),\n    'n_estimators': randint(1000, 5000),\n    'learning_rate': uniform(0.001, 0.1),\n}\n\nxgb_random_search = RandomizedSearchCV(\n    xgb_model,\n    param_distributions,\n    cv=10,\n    n_iter=10,\n    n_jobs=-1,\n    verbose=3,\n    scoring=\"accuracy\",\n)\n\nxgb_random_result = xgb_random_search.fit(X_train, y_train)\n\n\n\nCode\nprint(f\"Best Score: {xgb_random_result.best_score_:0.2f}\")\nxgb_random_result.best_params_\n\n\nBest Score: 0.76\n\n\n{'learning_rate': 0.031211714406977634,\n 'max_depth': 6,\n 'min_child_weight': 3,\n 'n_estimators': 1707}\n\n\n\n\nStochastic Gradient Boosting\nUsing the parameters from the best params achieved in the previous RandomizedGridCV.\n\nCode\n# create GBM estimator with best params\nbest_xgb_model = xgb.XGBClassifier(\n    **xgb_random_result.best_params_\n)\n\nparam_distributions = {\n    'subsample': [0.5, 0.75, 1],\n    'colsample_bynode': [0.5, 0.75, 1],\n    'colsample_bytree': [0.5, 0.75, 1],\n    'colsample_bylevel': [0.5, 0.75, 1],\n}\n# search with 10 random samples\nbest_xgb_random_search = RandomizedSearchCV(\n    best_xgb_model,\n    param_distributions,\n    cv=5,\n    n_iter=10,\n    n_jobs=-1,\n    verbose=3,\n    scoring=\"accuracy\",\n)\n\n# train\nbest_xgb_random_result = best_xgb_random_search.fit(X_train, y_train)\n\n\n\nCode\nprint(f\"Best Score: {best_xgb_random_result.best_score_:0.2f}\")\nbest_xgb_random_result.best_params_\n\n\nBest Score: 0.76\n\n\n{'subsample': 1,\n 'colsample_bytree': 1,\n 'colsample_bynode': 0.75,\n 'colsample_bylevel': 1}\n\n\n\n\nTuning\n\nCode\n# create GBM estimator with best params\ntunned_xgb_model = xgb.XGBClassifier(\n    learning_rate=0.031211714406977634,\n    max_depth=6,\n    min_child_weight=3,\n    subsample=1,\n    colsample_bytree=1,\n    colsample_bynode=0.75,\n    colsample_bylevel=1,\n)\n\n# search with 10 random samples\ntunned_xgb_random_search = RandomizedSearchCV(\n    tunned_xgb_model,\n    param_distributions={\n        \"n_estimators\": range(1000, 5000),\n    },\n    cv=5,\n    n_iter=10,\n    n_jobs=-1,\n    verbose=3,\n    scoring=\"accuracy\",\n)\n\n# train\ntunned_xgb_random_result = tunned_xgb_random_search.fit(X_train, y_train)\n\n\n\nCode\n# save the last best XGB model\nwith open('tunned_xgb_random_result.pickle', 'wb') as file:\n    pickle.dump(tunned_xgb_random_result, file)\n\nprint(f\"Best Score: {tunned_xgb_random_result.best_score_:0.3f}\")\ntunned_xgb_random_result.best_params_\n\n\nBest Score: 0.760\n\n\n{'n_estimators': 3008}\n\n\n\nCode\n# load model\nwith open('./tunned_xgb_random_result.pickle', 'rb') as file:\n    model: RandomizedSearchCV = pickle.load(file)"
  },
  {
    "objectID": "code/Binary_Classification.html#predict-outside-image",
    "href": "code/Binary_Classification.html#predict-outside-image",
    "title": "Binary Clssification with ML",
    "section": "Predict Outside Image",
    "text": "Predict Outside Image\n\n\nCode\npredict_image(model, '../data/IMG_0430.jpeg', show=True)\n\n\narray([0.00233829, 0.9976617 ], dtype=float32)"
  },
  {
    "objectID": "code/CNN.html",
    "href": "code/CNN.html",
    "title": "CNN",
    "section": "",
    "text": "Code\nimport random\nimport pickle\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Flatten\nfrom keras.optimizers import SGD, RMSprop, Adam\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\nfrom utils import (\n    load_all_images_3channel,\n    get_class_name,\n    predict_image_3c,\n    CLASSES,\n)\n\nPIXELS = 200\n# settings\nplt.style.use('seaborn')\nplt.show()\nplt.rcParams[\"figure.dpi\"] = 100\nplt.rcParams[\"figure.figsize\"] = (8, 5)"
  },
  {
    "objectID": "code/CNN.html#cnn-with-3-color-channels",
    "href": "code/CNN.html#cnn-with-3-color-channels",
    "title": "CNN",
    "section": "CNN with 3-Color Channels",
    "text": "CNN with 3-Color Channels\n\nCode\nmodel = Sequential([\n    # feature detector portion of model\n    Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(PIXELS, PIXELS, 3)),\n    MaxPool2D(pool_size=(2, 2)),\n    Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),\n    MaxPool2D(pool_size=(2, 2)),\n    Conv2D(filters=128, kernel_size=(3, 3), activation='relu'),\n    MaxPool2D(pool_size=(2, 2)),\n    Conv2D(filters=128, kernel_size=(3, 3), activation='relu'),\n    MaxPool2D(pool_size=(2, 2)),\n\n    # classifier portion of model\n    Flatten(),\n    Dense(units=512, activation='relu'),\n    Dense(units=5, activation='sigmoid'),\n])\n\nmodel.summary()\n\n\nCode\n# set optimizer and metrics\nmodel.compile(\n    optimizer=RMSprop(learning_rate=0.001, momentum=0.3),\n    loss=\"binary_crossentropy\",\n    metrics=[\"accuracy\"],\n)\n\n# train model\nhistory = model.fit(\n    x_train,\n    y_train,\n    batch_size=64,\n    epochs=20,\n    validation_split=0.2,\n    callbacks=[\n        EarlyStopping(patience=3, min_delta=0.0001, restore_best_weights=True),\n        ReduceLROnPlateau(patience=1, factor=0.1),\n    ],\n)\n\n\n\nCode\nmodel.evaluate(x_test, y_test)\npd.DataFrame(history.history).plot()\nplt.show()\n\n\n170/170 [==============================] - 2s 11ms/step - loss: 0.2327 - accuracy: 0.7380\n\n\n\n\n\n\n\nCode\npredictions = model.predict(x_test)\npred_values = np.argmax(predictions, axis=1)\n\ncm = confusion_matrix(y_test_labels, pred_values)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot(cmap=plt.cm.Blues)\nplt.grid(False)\nplt.show()\n\n\n170/170 [==============================] - 2s 9ms/step\n\n\n\n\n\n\nSample of missed images\n\n\nCode\nmissed_features = x_test[pred_values != y_test_labels]\nmissed_labels = pred_values[pred_values != y_test_labels]\n\n# first 10 missed predictions\nfig, axs = plt.subplots(3, 5, sharex=True, sharey=True)\nfig.tight_layout(h_pad=2)\nplt.figure(figsize=(4, 7), dpi=100)\n\nfor i, ax in enumerate(axs.flatten()):\n    ax.imshow(missed_features[i])\n    ax.set_title(f'Predicted: {get_class_name(missed_labels[i])}')\n\nplt.show()\n\n\n\n\n\n<Figure size 400x700 with 0 Axes>\n\n\n\n\nSave or Load Model\n\nCode\n# comment one line to save or loaod model\n\n# model.save('CNN')\nloaded_model = keras.models.load_model(\"./CNN\")"
  },
  {
    "objectID": "code/CNN.html#predict-a-single-image",
    "href": "code/CNN.html#predict-a-single-image",
    "title": "CNN",
    "section": "Predict a single image",
    "text": "Predict a single image\n\n\nCode\nprob = predict_image_3c(\n    loaded_model, \"../data/test_img3.jpeg\", pixels=PIXELS, show=True\n)\nplt.show()\n\npd.DataFrame(\n    {\"prob\": np.round(prob * 100, 1).flatten()},\n    index=CLASSES.keys(),\n).sort_values(\"prob\", ascending=False)\nnp.round(prob * 100, 1)\n\n\n\n\n\n[array([ 3.2, 90.2,  0.4,  3.4,  0.5], dtype=float32)]"
  },
  {
    "objectID": "code/DL.html",
    "href": "code/DL.html",
    "title": "Basic DL",
    "section": "",
    "text": "Code\nimport random\nimport pickle\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD, RMSprop, Adam\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom utils import load_all_images, get_class_name\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\nPIXELS = 200"
  },
  {
    "objectID": "code/DL.html#load-shuffle-split-data",
    "href": "code/DL.html#load-shuffle-split-data",
    "title": "Basic DL",
    "section": "Load, Shuffle & Split Data",
    "text": "Load, Shuffle & Split Data\n\n\nCode\nx, y = load_all_images(\n    classes=[\"sunny\", \"cloudy\", \"foggy\", \"rainy\", \"snowy\"], pixels=PIXELS\n)\n# make them as numpy array\nx = np.array(x)\ny = np.array(y)\n\n# shuffle and split\nx_train, x_test, y_train, y_test = train_test_split(\n    x, y, train_size=0.8, shuffle=True, random_state=777\n)\n\ny_train_labels = y_train.copy()\ny_test_labels = y_test.copy()\n\n# convert class vector into binary matrix\ny_train = to_categorical(y_test)\ny_test = to_categorical(y_train)\n\nx_train.shape, y_train.shape\n\n\n((14431, 40000), (3608, 5))\n\n\n\nCode\n# TODO fix get_class_name method to handle binary matrix\ni = 67\nplt.figure(figsize=(3, 3))\nplt.imshow(x[i].reshape((PIXELS, PIXELS)), cmap=plt.get_cmap('gray'))\nplt.title(f'An image sample of class: {get_class_name(y[i])}')\n\nplt.show()"
  },
  {
    "objectID": "code/DL.html#sequential-model",
    "href": "code/DL.html#sequential-model",
    "title": "Basic DL",
    "section": "Sequential Model",
    "text": "Sequential Model\n\nBasic Implementation\n\n\nFind Best batch_size\n\nCode\nsizes = [16, 32, 64, 128, 256, 512]\nresults = pd.DataFrame(\n    {\n        \"loss\": [None] * len(sizes),\n        \"accuracy\": [None] * len(sizes),\n    },\n    index=sizes,\n)\n\nfor size in sizes:\n    model = Sequential([\n        Dense(units=2**10, activation='relu', input_dim=PIXELS**2),\n        Dense(units=5, activation='softmax'),\n    ])\n\n    # Define how our model is going to learn\n    model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')\n    \n    # train model\n    history = model.fit(\n        x_train,\n        y_train,\n        batch_size=size,\n        epochs=20,\n        validation_split=0.2,\n        shuffle=True,\n    )\n\n    results.loc[size] = model.evaluate(x_test, y_test)\n\n\n\nCode\nresults.plot.bar()\nplt.xticks(rotation=0)\nplt.title('Fit `batch_size` vs loss and acuracy')\nplt.show()\n\n\n\n\n\n\nCode\nmodel = Sequential([\n    Dense(units=2**10, activation='relu', input_dim=PIXELS**2),\n    Dense(units=5, activation='softmax'),\n])\n\n# 2. Define how our model is going to learn\nmodel.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')\n\n# train model\nhistory = model.fit(\n    x_train,\n    y_train,\n    batch_size=32,\n    epochs=20,\n    validation_split=0.2,\n)\n\n\n\nCode\npd.DataFrame(history.history).plot()\nplt.show()\nmodel.evaluate(x_test, y_test)\n\n\n\n\n\n113/113 [==============================] - 2s 16ms/step - loss: 1.3149 - accuracy: 0.4568\n\n\n[1.3148653507232666, 0.45676273107528687]\n\n\n\n\nSearch for Best Learning Rate\n\nCode\nmodel = Sequential(\n    [\n        Dense(units=2**10, activation=\"relu\", input_dim=PIXELS**2),\n        Dense(units=5, activation=\"softmax\"),\n    ]\n)\n\n# 2. Define how our model is going to learn\nmodel.compile(\n    loss=\"categorical_crossentropy\",\n    optimizer=SGD(learning_rate=0.01, momentum=0.01),\n    metrics=\"accuracy\",\n)\n\n# train model\nhistory = model.fit(\n    x_train,\n    y_train,\n    batch_size=32,\n    epochs=20,\n    validation_split=0.2,\n    callbacks=[\n        EarlyStopping(patience=3, min_delta=0.0001, restore_best_weights=True),\n        ReduceLROnPlateau(patience=1, factor=0.1)\n    ],\n)\n\n\n\nCode\npd.DataFrame(history.history).plot()\nplt.show()\nmodel.evaluate(x_test, y_test)\n\n\n\n\n\n113/113 [==============================] - 2s 15ms/step - loss: 1.1983 - accuracy: 0.5272\n\n\n[1.1982755661010742, 0.5271618366241455]\n\n\n\n\nCode\ny_test\n\n\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       ...,\n       [0., 0., 0., 1., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 1., 0., 0.]], dtype=float32)\n\n\n\n\nCode\npredictions = model.predict(x_test)\npred_values = np.argmax(predictions, axis=1)\n\ncm = confusion_matrix(y_test_labels, pred_values)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot(cmap=plt.cm.Blues)\nplt.grid(False)\nplt.show()\n\n\n113/113 [==============================] - 1s 10ms/step"
  },
  {
    "objectID": "code/webscrape-images.html",
    "href": "code/webscrape-images.html",
    "title": "site",
    "section": "",
    "text": "import io\nfrom bs4 import BeautifulSoup\nimport requests\nfrom PIL import Image\nimport numpy as np\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys"
  },
  {
    "objectID": "code/webscrape-images.html#collect-images",
    "href": "code/webscrape-images.html#collect-images",
    "title": "site",
    "section": "Collect images",
    "text": "Collect images\nOpen a GET HTTP request with the searched params for the serach engines such Bing, and retrieve all the images. Store the images in a current directory.\nbrowser = webdriver.Safari()\nbrowser.set_window_position(0, 0)\nbrowser.set_window_size(1200, 1200)\nBING_URL = 'https://www.bing.com/images/search?q=sunny+weather'\n\nbrowser.get(BING_URL)\nbs = BeautifulSoup(browser.page_source)\n# get all image tiles\na_element = browser.find_elements(By.CSS_SELECTOR, \"[data-idx]\")[1].find_element(\n    By.CLASS_NAME, \"inflnk\"\n)\n# a_element.get_attribute('href')\na_element.send_keys(Keys.RETURN)\n# switch to opened image iframe\nbrowser.switch_to.frame('OverlayIFrame')\n# switch back to the page\nbrowser.switch_to.default_content()\n\n# find elements in the iframe\nside_images = browser.find_elements(By.TAG_NAME, 'li')\n\nfor img in side_images:\n    print(img.find_element(By.TAG_NAME, 'img'))\n\n[<selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A28DF694-2057-4F78-B706-B765AB45923D\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A81A0994-F06F-4CA3-A985-D1E922960BE5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-CA676F28-C2AF-4393-B7C0-114E1CB03A3A\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-FE650838-13BF-457F-B4A1-E97E5031F600\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D8AB783C-15FD-4C06-BF88-B521052F60DA\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-4823D837-AC31-44DC-90E4-58C2BCA19717\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-14180BCC-8B62-4417-B576-D2486FA79780\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-5718E66A-DC11-462D-B22B-7795EDBF1877\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F395DE15-74B1-40AD-BCBF-ECC58E4DAEEC\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-271730E2-5012-450B-BF07-76850ED521C8\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-855CE451-9808-44A8-A9E8-12AB23845456\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-0F9BF14A-2754-4785-BFE0-DD464997A8A5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-146DD378-46CF-4DB8-AB13-782C2DE165D3\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D25F8E64-2204-4F7A-93D9-2A878BD0B98C\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-280397B7-8951-48FD-8A5C-99DFB07DE592\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-27DAB8CE-C212-4B95-95C8-526E6668B4E4\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A1A24CC8-A951-4884-B44A-9372B5923463\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-79C551A7-7F11-4252-B643-FFC426EFF6BA\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-4DCF67D1-35F2-44DA-9098-CD9A440427EA\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-8290E49E-F028-4DA6-A754-A70750FBED5F\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D0D015D7-5BFF-4887-A5F0-D304FC3A3A13\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F06AC939-FB00-45CD-B79B-4AB9E41168E3\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-03A2B3C9-9FEA-4158-8A45-042891E47397\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D5A07D87-E5F3-4AA2-96D3-2CAD0B1F5CAD\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7446C89B-BBBC-4F6C-A0F3-C9C31665C5E5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-925C72CF-AA81-46B5-9896-040680219A83\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-DDD8F927-4A85-49E4-8AD8-7AAB1715B485\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-54DF03B4-7A8F-4DEB-95E6-0BBACD1D5FD5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-2316C174-E8FD-4A32-BC85-0ED792E7563A\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-5A354B22-972D-4FBD-B0AB-41D0559BD725\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-8C651EAB-4EA3-4234-B942-128B94416E49\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6C8CFBF9-FDD7-4B0D-881A-0EC164D54C93\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-200AEBF7-D30C-421C-8E8D-50ACBFDED8DF\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E6418415-1638-4BD2-BFA5-A2E6049EAF5C\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F0EC4EF7-6F9D-4421-BAA0-E62815D2EE92\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-EB283644-4D9D-4212-A353-67855C410491\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-3FBBF585-4A89-468E-9E18-5B65AB646BBE\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-533343DD-CB09-456B-9D3B-80ED07EF1A41\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-BF330C0E-53CF-4892-AAEA-413ABC269E72\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-356EB30F-D4EB-493B-9160-ADFE97BA92E1\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C97B8698-FC4C-462D-A0B7-02E980165DA2\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-2C193C2F-A4E5-46B0-BA9B-0139C19ABA82\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F0F25DA4-C215-4F89-97E9-2C215AE2C401\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-469C141A-C4B7-4075-B8BF-DD5AFEE45C14\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A13EAFEB-7C40-4082-9075-D530CF33777B\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-28C23315-CB44-42A3-8F06-4FF150BF37D4\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F5DF3BDA-7E90-484D-9E2C-254BCDD52EFB\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-8C21AB70-3190-4C0D-902D-8163CDE85AA7\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7F95CB5E-A064-4ACD-8796-D79A50505CA7\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C7220C4B-AED0-4434-B7E0-359648C60C88\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-1997679F-1184-4E2D-880B-B8692ABB290A\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-0ED678E5-CD7F-4E4C-90B9-20B2F57FC750\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-28C89B5D-E3BB-4044-A905-69F1709884FE\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-4F8DC6D8-6E40-463D-92B0-5B5C359D5FB1\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-57EF89FC-553F-414B-813B-6CA8D62CAA25\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6EC1C8B8-7A56-4761-85BA-340774D11198\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-EFE1BC89-1123-4B70-AF88-073576E13459\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E482C691-3ECF-4958-9899-A184C9DD805F\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-34E9F8AA-7078-4322-B833-A76BD9B74713\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-097980FF-1740-4B45-8B7A-6CE89E9E129F\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F2FFEBC1-0CC2-4369-9CF7-22D9CBC2FFE9\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-DAAB3642-1D6C-463D-9D48-A06FE8BB15A6\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-244C4EDB-66D1-4F39-BBCD-C7137AF4D5FD\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F4559C14-7D36-40D3-9853-22666C998B9C\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7E7EDEB6-F670-4254-B7D5-9BB1E450A7A5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-3583F2E9-9097-44B0-AB70-5F32B30D5599\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C2AC6265-E13A-4BA4-BAFA-3803ED7262B7\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-66DC71A8-5595-42CE-AAD8-916A40ED5F1B\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C6840678-46C2-4A45-9724-B0390A38F7CF\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6CB1165E-1A85-4CA8-BFD1-6D8F57D26FD4\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E6BDDCFF-8AEB-4398-A6C3-3E16CD4D51A5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-B9D1D007-A3BE-45FC-B7FC-1B19E830C5A2\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6C0CD0D5-C463-456F-9FB8-303705FAFAE0\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7FDC4355-0E94-4768-A676-9553A3E606FF\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F0A8F27E-8C0F-4E54-86E7-2DE7990E03B2\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-ECF57018-1097-4705-BD66-6C35CE483126\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E0C289BA-D586-4BA7-9BDF-6DB4F15D3405\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A83B526A-0FA7-45C1-BE22-4A1524A1D088\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-0E77C3B5-4A6A-41E1-B53E-CA2FEFA76236\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-2503D4EA-8783-4681-A173-07FCAF2F9603\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-B7E19E87-3D5D-4147-9D1E-D3074A317AAE\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7EF2F5DF-900C-4D3C-A629-18333E913C3D\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-5B96BDC0-DD80-417B-8EDF-660F47C9D8DA\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-72665B20-4682-4E5F-B324-281170EA2974\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-21FE2CE7-1083-4FF5-A92B-F4C523469E24\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-3944E3D4-A7A1-4F9C-BDB6-B219FD33533B\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D0349C81-8B1C-48E6-9817-64D49455F8D3\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-DCF750B7-E63C-4A83-B2F1-7454B60CC980\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-76494B53-6621-48A5-8F12-934692D06D9B\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-A39A14B8-AF2A-4FF2-97AD-C568957E49DA\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C2BE51FE-C145-4F96-9CBD-26DC847E3C0F\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D62E128C-99CF-47DA-A547-75301D562307\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-CF58B96C-E790-464D-8274-0748730847B7\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-3D9F81F0-7928-4F41-A565-AA279D2CA0A9\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-370E9A8E-496A-4272-9B23-708BA010D3FB\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6BDA3DAB-9533-4D7E-A2F8-2BB5E43FA9C0\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-6CEEC4B3-D042-47B3-A65E-57E137FEACA5\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-D9FD21DD-F930-41B7-8560-AF2861327F85\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-81A8DF66-89E4-44C0-92E8-80FF21A2DC35\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-7CFF3BFD-7B7A-4061-8F9D-8BB3031BA055\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-8C1D1193-BF75-4640-B153-17E51F1F9388\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-B196C336-2534-43FA-8679-FB15D0C7BF45\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-FBC9B7DC-923F-43EC-9254-01C954E2ADED\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F0985DD6-AF43-4A67-84CE-C2F584B331FF\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E625F074-EE24-4EF8-90D2-F9527B1E13BE\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-EFA2FE98-B89E-4FC4-B342-4A938D696519\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-CF1550D0-1F99-4DF0-9A56-A2C41FA20364\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-957AB0C2-6171-48E5-BEB2-F72559733DA8\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-28C2A50F-AAEF-4391-B762-152C24F56A15\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-79DCD2DB-0C81-4C82-B4D2-55F77F5AAF64\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-75A2988B-6A36-4D23-A38E-92B85C376CBD\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-F62A486D-2D75-4DAB-BD53-1672F90D8540\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-E16BC3EE-38CF-418D-84DD-126582FB910D\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-9C969BDA-A09D-4281-877F-469D356FBA14\")>,\n <selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-C698D86D-DDB9-42A8-860A-E393EC4E0882\")>]\n\n\n\nbrowser.find_element(By.CLASS_NAME, 'richImgLnk')\n\n<selenium.webdriver.remote.webelement.WebElement (session=\"20C65124-0EAF-4858-ADD6-3EA004EFCC76\", element=\"node-9C8C1F2A-CA78-4F55-A850-A11BDF933CAE\")>\n\n\n# quick look at the selected HTML element\nImage.open(io.BytesIO(el.screenshot_as_png))\n\nall_img = bs.find_all('img')\nprint(*all_img, sep='\\n')\n\nfor img in all_img:\n    print(img['src'])\nbrowser.stop_client()\nBING_URL = 'https://www.bing.com/images/search?q=sunny+weather'\n# SEARCH_KEYS = ['sunny', 'weahter']\n\nres = requests.get(BING_URL)\n\ncontent = BeautifulSoup(res.content)\n# print(content)\n\nvar = content.find_all('img')\nvar1 = content.find_all('img', class_='mimg')\n\nprint(*var, sep='\\n')\nprint(*var1, sep='\\n')\n\n# image_urls = []\n# for img in content.find_all('img', class_='mimg'):\n#     image_urls.append(img['src'].split('?')[0])\nfor i in range(len(image_urls)):\n    res = requests.get(image_urls[i], stream=True)\n    with open(f'sunny/{i}.jpg', 'wb') as file:\n        file.write(res.content)"
  }
]